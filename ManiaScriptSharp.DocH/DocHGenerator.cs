using ManiaScriptSharp.DocH.Blocks;
using Microsoft.CodeAnalysis;
using System.Collections.Immutable;
using System.Text;

#if DEBUG
using System.Diagnostics;
#endif

namespace ManiaScriptSharp.DocH;

[Generator]
public class DocHGenerator : ISourceGenerator
{
    private readonly Func<SymbolContext, HBlock>[] hBlocks = new Func<SymbolContext, HBlock>[]
    {
        context => new CommentHBlock(depth: 0),
        context => new ClassOrStructHBlock(context),
        context => new NamespaceHBlock(context)
    };

    public void Initialize(GeneratorInitializationContext context)
    {
#if DEBUG
        if (!Debugger.IsAttached)
        {
            Debugger.Launch();
        }
#endif
    }

    public void Execute(GeneratorExecutionContext context)
    {
        var docHFile = context.AdditionalFiles.First(x => x.Path.EndsWith("doc.h"));

        var maniaScriptSharpAssemblySymbol = context.Compilation
            .SourceModule
            .ReferencedAssemblySymbols
            .First(x => x.Name == "ManiaScriptSharp");

        var maniaScriptSharpSharedNamespace = maniaScriptSharpAssemblySymbol.GlobalNamespace
            .GetNamespaceMembers()
            .FirstOrDefault(x => x.Name == "ManiaScriptSharp");

        var maniaScriptSharpSharedSymbols = maniaScriptSharpSharedNamespace.GetTypeMembers()
            .Where(x => SymbolEqualityComparer.Default.Equals(x.ContainingAssembly, maniaScriptSharpAssemblySymbol))
            .ToImmutableDictionary(x => x.Name, x => (ISymbol)x);

        var maniaScriptSharpNamespace = context.Compilation
            .GlobalNamespace
            .GetNamespaceMembers()
            .FirstOrDefault(x => x.Name == "ManiaScriptSharp");

        var maniaScriptSharpSpecificSymbols = maniaScriptSharpNamespace.GetTypeMembers()
            .Where(x => SymbolEqualityComparer.Default.Equals(x.ContainingAssembly, context.Compilation.Assembly))
            .ToImmutableDictionary(x => x.Name, x => (ISymbol)x);

        var symbolContext = new SymbolContext(maniaScriptSharpSharedSymbols, maniaScriptSharpSpecificSymbols);

        var hashset = new HashSet<string>();

        foreach (var sourceFile in BuildSourceCodeFiles(docHFile, symbolContext))
        {
            if (hashset.Contains(sourceFile.FileName))
            {
                continue;
            }
            
            context.AddSource(sourceFile.FileName, sourceFile.SourceCode.ToString());
            hashset.Add(sourceFile.FileName);
        }
    }

    internal IEnumerable<SourceCodeFile> BuildSourceCodeFiles(AdditionalText docHFile, SymbolContext context)
    {
        var text = docHFile.GetText();

        if (text is null)
        {
            throw new Exception("Text is null");
        }

        var reader = new StringReader(text.ToString());

        while (true)
        {
            var sourceCodeFile = BuildSourceCodeFile(reader, context);

            if (sourceCodeFile is null)
            {
                break;
            }

            yield return sourceCodeFile;
        }
    }

    internal SourceCodeFile? BuildSourceCodeFile(TextReader reader, SymbolContext context)
    {
        var sourceCodeBuilder = new StringBuilder();
        sourceCodeBuilder.AppendLine("// This code was generated by ManiaScriptSharp.DocH");
        sourceCodeBuilder.AppendLine();
        sourceCodeBuilder.AppendLine("using System.Collections.Generic;");
        sourceCodeBuilder.AppendLine();
        sourceCodeBuilder.AppendLine("namespace ManiaScriptSharp;");
        sourceCodeBuilder.AppendLine();

        var hintName = default(string);
        var end = false;

        while (true)
        {
            var lineRead = reader.ReadLine();

            if (lineRead is null)
            {
                end = true;
                break;
            }

            var line = lineRead.TrimEnd();

            if (string.IsNullOrWhiteSpace(line))
            {
                continue;
            }

            foreach (var func in hBlocks)
            {
                var block = func(context);

                if (!block.TryRead(line, reader, sourceCodeBuilder))
                {
                    continue;
                }
                
                if (block is MajorHBlock majorBlock)
                {
                    hintName = majorBlock.Name;
                }

                break;
            }

            if (hintName is not null)
            {
                break;
            }
        }

        sourceCodeBuilder.Replace("Array<", "IList<");

        if (hintName is not null)
        {
            return new SourceCodeFile($"{hintName}.g.cs", sourceCodeBuilder);
        }
        
        if (end)
        {
            return null;
        }
        
        throw new Exception("Hint name is missing.");
    }
}
